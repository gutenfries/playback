
[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
DEV = true
RELEASE = false
TARGET_OS = "unknown"

[env.release]
DEV = false
RELEASE = true

[tasks.default]
dependencies = ["build"]


[tasks.format]
category = "Format"
dependencies = [
  "rustfmt",
  "clang-format",
]

[tasks.clang-format]
command = "bash"
args = ["../utils/clang-format.sh"]

[tasks.clang-tidy]
command = "bash"
args = ["../utils/clang-tidy.sh"]

[tasks.rustfmt]
args = [
  "fmt",
  "--all",
  "--",
  "--emit=files",
]
category = "Format"
command = "cargo"
description = "Format Rust code"
install_crate = "rustfmt"

[tasks.clean]
args = ["clean"]
command = "cargo"

[tasks.build]
args = ["build"]
category = "Build"
command = "cargo"
description = "Compiles all rust code in the project."

[tasks.test]
args = ["test"]
category = "Test"
command = "cargo"

[tasks.lint]
category = "Lint"
dependencies = ["format"]
description = "Runs all linters"
run_task = {name = [
  "clippy",
  "clang-tidy",
], parallel = false}

[tasks.clippy]
args = [
  "clippy",
  "--all-targets",
  "--all-features",
  "--",
  "-D",
  "clippy::all",
  "-D",
  "clippy::await_holding_refcell_ref",
  "-D",
  "clippy::missing_safety_doc",
  "-D",
  "clippy::undocumented_unsafe_blocks"
]
category = "Lint"
command = "cargo"
description = "Runs the rust linter"
install_crate = "clippy"

[tasks.run]
args = [
  "run",
  "--bin cli",
]
category = "Run"
command = "cargo"
description = "Runs the cli."
